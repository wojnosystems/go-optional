// {{.Name}} start

type {{.Name}} struct {
	state base
	value {{.PrimitiveKeyword}}
}

func {{.Name}}Unset() {{.Name}} {
	return {{.Name}} {
		state: newBase(),
	}
}

func {{.Name}}From(value {{.PrimitiveKeyword}}) {{.Name}} {
	return {{.Name}} {
		state: newBaseSet(),
		value: value,
	}
}

func (b {{.Name}}) Value() {{.PrimitiveKeyword}} {
	return b.value
}

func (b {{.Name}}) IsSet() bool {
	return b.state.IsSet()
}

func (b *{{.Name}}) Set(value {{.PrimitiveKeyword}}) {
	b.state.Set()
	b.value = value
}

func (b *{{.Name}}) Unset() {
	b.state.Unset()
}

func (b {{.Name}}) IsEqual( compareWith {{.Name}} ) bool {
    leftSet := b.IsSet()
    // one is set, the other is not set, not equal
    if leftSet != compareWith.IsSet() {
        return false
    }
    // both are unset
    if !leftSet {
        return true
    }
    // both are set, compare the actual values
    return b.Value() == compareWith.Value()
}

// {{.Name}} end

