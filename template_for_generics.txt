type {{.Name}} struct {
	state base
	value {{.PrimitiveKeyword}}
}

func New{{.Name}}() {{.Name}} {
	return {{.Name}} {
		state: newBase(),
	}
}

func New{{.Name}}From(value {{.PrimitiveKeyword}}) {{.Name}} {
	return {{.Name}} {
		state: newBaseSet(),
		value: value,
	}
}

func (b {{.Name}}) Value() {{.PrimitiveKeyword}} {
	return b.value
}

func (b {{.Name}}) IsSet() bool {
	return b.state.IsSet()
}

func (b *{{.Name}}) Set(value {{.PrimitiveKeyword}}) {
	b.state.Set()
	b.value = value
}

func (b *{{.Name}}) Unset() {
	b.state.Unset()
}

func (b {{.Name}}) IsEqual( compareWith {{.Name}} ) bool {
    left := b.Value()
    leftOk := b.IsSet()
    right := compareWith.Value()
    rightOk := compareWith.IsSet()
    return leftOk == rightOk && left == right
}
